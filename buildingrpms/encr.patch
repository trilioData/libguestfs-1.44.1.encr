diff -ruN libguestfs-1.44.1.orig/daemon/rsync.c libguestfs-1.44.1.mod/daemon/rsync.c
--- libguestfs-1.44.1.orig/daemon/rsync.c	2020-03-06 14:31:08.121078643 -0500
+++ libguestfs-1.44.1.mod/daemon/rsync.c	2023-02-27 16:03:14.350079243 -0500
@@ -39,7 +39,7 @@
 static int
 rsync (const char *src, const char *src_orig,
        const char *dest, const char *dest_orig,
-       int archive, int deletedest)
+       int archive, int deletedest, int nowholefile)
 {
   const char *argv[MAX_ARGS];
   size_t i = 0;
@@ -54,6 +54,12 @@
   if (deletedest)
     ADD_ARG (argv, i, "--delete");
 
+  if (nowholefile) {
+    ADD_ARG (argv, i, "--no-whole-file");
+    ADD_ARG (argv, i, "--inplace");
+  }
+  ADD_ARG (argv, i, "--no-specials");
+
   ADD_ARG (argv, i, src);
   ADD_ARG (argv, i, dest);
   ADD_ARG (argv, i, NULL);
@@ -70,7 +76,7 @@
 /* Takes optional arguments, consult optargs_bitmask. */
 int
 do_rsync (const char *src_orig, const char *dest_orig,
-          int archive, int deletedest)
+          int archive, int deletedest, int nowholefile)
 {
   CLEANUP_FREE char *src = NULL, *dest = NULL;
 
@@ -85,14 +91,16 @@
     archive = 0;
   if (!(optargs_bitmask & GUESTFS_RSYNC_DELETEDEST_BITMASK))
     deletedest = 0;
+  if (!(optargs_bitmask & GUESTFS_RSYNC_NOWHOLEFILE_BITMASK))
+    nowholefile = 0;
 
-  return rsync (src, src_orig, dest, dest_orig, archive, deletedest);
+  return rsync (src, src_orig, dest, dest_orig, archive, deletedest, nowholefile);
 }
 
 /* Takes optional arguments, consult optargs_bitmask. */
 int
 do_rsync_in (const char *remote, const char *dest_orig,
-             int archive, int deletedest)
+             int archive, int deletedest, int nowholefile)
 {
   CLEANUP_FREE char *dest = NULL;
 
@@ -106,14 +114,16 @@
     archive = 0;
   if (!(optargs_bitmask & GUESTFS_RSYNC_IN_DELETEDEST_BITMASK))
     deletedest = 0;
+  if (!(optargs_bitmask & GUESTFS_RSYNC_IN_NOWHOLEFILE_BITMASK))
+    nowholefile = 0;
 
-  return rsync (remote, remote, dest, dest_orig, archive, deletedest);
+  return rsync (remote, remote, dest, dest_orig, archive, deletedest, nowholefile);
 }
 
 /* Takes optional arguments, consult optargs_bitmask. */
 int
 do_rsync_out (const char *src_orig, const char *remote,
-              int archive, int deletedest)
+              int archive, int deletedest, int nowholefile)
 {
   CLEANUP_FREE char *src = NULL;
 
@@ -127,6 +137,8 @@
     archive = 0;
   if (!(optargs_bitmask & GUESTFS_RSYNC_OUT_DELETEDEST_BITMASK))
     deletedest = 0;
+  if (!(optargs_bitmask & GUESTFS_RSYNC_OUT_NOWHOLEFILE_BITMASK))
+    nowholefile = 0;
 
-  return rsync (src, src_orig, remote, remote, archive, deletedest);
+  return rsync (src, src_orig, remote, remote, archive, deletedest, nowholefile);
 }
diff -ruN libguestfs-1.44.1.orig/generator/actions_core.ml libguestfs-1.44.1.mod/generator/actions_core.ml
--- libguestfs-1.44.1.orig/generator/actions_core.ml	2021-04-03 06:24:38.048065697 -0400
+++ libguestfs-1.44.1.mod/generator/actions_core.ml	2023-02-27 16:03:14.447077299 -0500
@@ -210,7 +210,7 @@
 
   { defaults with
     name = "add_drive"; added = (0, 0, 3);
-    style = RErr, [String (PlainString, "filename")], [OBool "readonly"; OString "format"; OString "iface"; OString "name"; OString "label"; OString "protocol"; OStringList "server"; OString "username"; OString "secret"; OString "cachemode"; OString "discard"; OBool "copyonread"; OInt "blocksize"];
+    style = RErr, [String (PlainString, "filename")], [OBool "readonly"; OString "format"; OString "iface"; OString "name"; OString "label"; OString "protocol"; OStringList "server"; OString "username"; OString "secret"; OString "cachemode"; OString "discard"; OBool "copyonread"; OInt "blocksize"; OString "secobject"];
     once_had_no_optargs = true;
     blocking = false;
     fish_alias = ["add"];
@@ -479,6 +479,13 @@
 Only a subset of the backends support this parameter (currently only the
 libvirt and direct backends do).
 
+=item C<secobject>
+
+The object that describes the encryption key if the drive is encrypted.
+e.g. secobject:secret,id=sec0,data=backing where id is the name of the
+encryption object, data is the encryption key in plain text.
+
+
 =back" };
 
   { defaults with
@@ -1353,7 +1360,7 @@
 
   { defaults with
     name = "disk_create"; added = (1, 25, 31);
-    style = RErr, [String (PlainString, "filename"); String (PlainString, "format"); Int64 "size"], [OString "backingfile"; OString "backingformat"; OString "preallocation"; OString "compat"; OInt "clustersize"];
+    style = RErr, [String (PlainString, "filename"); String (PlainString, "format"); Int64 "size"], [OString "backingfile"; OString "backingformat"; OString "preallocation"; OString "compat"; OInt "clustersize"; OString "secobject"];
     test_excuse = "tests in tests/create subdirectory";
     shortdesc = "create a blank disk image";
     longdesc = "\
@@ -7530,7 +7537,7 @@
 
   { defaults with
     name = "rsync"; added = (1, 19, 29);
-    style = RErr, [String (Pathname, "src"); String (Pathname, "dest")], [OBool "archive"; OBool "deletedest"];
+    style = RErr, [String (Pathname, "src"); String (Pathname, "dest")], [OBool "archive"; OBool "deletedest"; OBool "nowholefile"];
     optional = Some "rsync";
     test_excuse = "tests are in tests/rsync";
     shortdesc = "synchronize the contents of two directories";
@@ -7556,11 +7563,15 @@
 
 Delete files at the destination that do not exist at the source.
 
+=item C<nowholefile>
+
+Copies the delta changes from source file to destination file
+
 =back" };
 
   { defaults with
     name = "rsync_in"; added = (1, 19, 29);
-    style = RErr, [String (PlainString, "remote"); String (Pathname, "dest")], [OBool "archive"; OBool "deletedest"];
+    style = RErr, [String (PlainString, "remote"); String (Pathname, "dest")], [OBool "archive"; OBool "deletedest"; OBool "nowholefile"];
     optional = Some "rsync";
     test_excuse = "tests are in tests/rsync";
     shortdesc = "synchronize host or remote filesystem with filesystem";
@@ -7585,7 +7596,7 @@
 
   { defaults with
     name = "rsync_out"; added = (1, 19, 29);
-    style = RErr, [String (Pathname, "src"); String (PlainString, "remote")], [OBool "archive"; OBool "deletedest"];
+    style = RErr, [String (Pathname, "src"); String (PlainString, "remote")], [OBool "archive"; OBool "deletedest"; OBool "nowholefile"];
     optional = Some "rsync";
     test_excuse = "tests are in tests/rsync";
     shortdesc = "synchronize filesystem with host or remote filesystem";
diff -ruN libguestfs-1.44.1.orig/lib/copy-in-out.c libguestfs-1.44.1.mod/lib/copy-in-out.c
--- libguestfs-1.44.1.orig/lib/copy-in-out.c	2020-03-06 14:31:08.167077983 -0500
+++ libguestfs-1.44.1.mod/lib/copy-in-out.c	2023-02-27 16:03:14.507076096 -0500
@@ -82,6 +82,8 @@
   snprintf (fdbuf, sizeof fdbuf, "/dev/fd/%d", fd);
 
   r = guestfs_tar_in (g, fdbuf, remotedir);
+  if (r == -1)
+    return -1;
 
   if (close (fd) == -1) {
     perrorf (g, "close (tar subprocess)");
@@ -211,6 +213,8 @@
     snprintf (fdbuf, sizeof fdbuf, "/dev/fd/%d", fd);
 
     r = guestfs_tar_out (g, remotepath, fdbuf);
+    if (r == -1)
+      return -1;
 
     if (close (fd) == -1) {
       perrorf (g, "close (tar-output subprocess)");
diff -ruN libguestfs-1.44.1.orig/lib/create.c libguestfs-1.44.1.mod/lib/create.c
--- libguestfs-1.44.1.orig/lib/create.c	2020-03-09 08:54:05.032993277 -0400
+++ libguestfs-1.44.1.mod/lib/create.c	2023-02-27 16:03:14.508076076 -0500
@@ -249,6 +249,44 @@
   guestfs_int_string_is_valid ((format), 1, 16, \
                                VALID_FLAG_ALPHA|VALID_FLAG_DIGIT, "")
 
+static char *
+convert_to_json_str(guestfs_h *g, const char *filename)
+{
+    char *p = strdup(filename);
+
+    char *rest = p;
+    char *token;
+
+    char json_str[1024];
+    char ekey_str[256];
+    char fname_str[512];
+
+     if (strstr(filename, "filename") == NULL ||
+         strstr(filename, "encrypt") == NULL) {
+         return NULL;
+     }
+     memset(json_str, 0, 512);
+     memset(fname_str, 0, 512);
+     memset(ekey_str, 0, 256);
+     while ((token = strtok_r(rest, ",", &rest))) {
+         printf("%s\n", token);
+
+         if (strstr(token, "filename")) {
+             char *fname = token;
+             strtok_r(fname, "=", &fname);
+             sprintf(fname_str, "\"driver\":\"qcow2\",\"file\":{\"driver\":\"file\",\"filename\":\"%s\"}", fname);
+         } else if (strstr(token, "encrypt")) {
+             char *ekey = token;
+
+             strtok_r(ekey, "=", &ekey);
+             sprintf(ekey_str, "\"encrypt.key-secret\": \"%s\"", ekey);
+         }
+    }
+    sprintf(json_str, "json:{%s,%s}", fname_str, ekey_str);
+    free(p);
+    return strdup(json_str);
+}
+
 static int
 disk_create_qcow2 (guestfs_h *g, const char *filename, int64_t size,
                    const char *backingfile,
@@ -257,7 +295,9 @@
   const char *backingformat = NULL;
   const char *preallocation = NULL;
   const char *compat = NULL;
+  char *json_str = NULL;
   int clustersize = -1;
+
   CLEANUP_FREE_STRINGSBUF DECLARE_STRINGSBUF (optionsv);
   CLEANUP_CMD_CLOSE struct command *cmd = guestfs_int_new_command (g);
   int r;
@@ -308,27 +348,37 @@
   guestfs_int_cmd_add_arg (cmd, "-f");
   guestfs_int_cmd_add_arg (cmd, "qcow2");
 
-  /* -o parameter. */
-  if (backingfile) {
-    CLEANUP_FREE char *p = guestfs_int_qemu_escape_param (g, backingfile);
-    guestfs_int_add_sprintf (g, &optionsv, "backing_file=%s", p);
+  if (optargs->bitmask & GUESTFS_DISK_CREATE_SECOBJECT_BITMASK) {
+     CLEANUP_FREE char *p = guestfs_int_qemu_escape_param (g, backingfile);
+     json_str = convert_to_json_str(g, p);
+     guestfs_int_cmd_add_arg (cmd, "-b");
+     guestfs_int_cmd_add_arg (cmd, json_str);
+     guestfs_int_cmd_add_arg (cmd, "--object");
+     guestfs_int_cmd_add_arg (cmd, optargs->secobject);
+     free(json_str);
+  } else {
+     /* -o parameter. */
+     if (backingfile) {
+       CLEANUP_FREE char *p = guestfs_int_qemu_escape_param (g, backingfile);
+
+       guestfs_int_add_sprintf (g, &optionsv, "backing_file=%s", p);
+     }
+     if (backingformat)
+       guestfs_int_add_sprintf (g, &optionsv, "backing_fmt=%s", backingformat);
+     if (preallocation)
+       guestfs_int_add_sprintf (g, &optionsv, "preallocation=%s", preallocation);
+     if (compat)
+       guestfs_int_add_sprintf (g, &optionsv, "compat=%s", compat);
+     if (clustersize >= 0)
+       guestfs_int_add_sprintf (g, &optionsv, "cluster_size=%d", clustersize);
+     guestfs_int_end_stringsbuf (g, &optionsv);
+
+     if (optionsv.size > 1) {
+       CLEANUP_FREE char *options = guestfs_int_join_strings (",", optionsv.argv);
+       guestfs_int_cmd_add_arg (cmd, "-o");
+       guestfs_int_cmd_add_arg (cmd, options);
+     }
   }
-  if (backingformat)
-    guestfs_int_add_sprintf (g, &optionsv, "backing_fmt=%s", backingformat);
-  if (preallocation)
-    guestfs_int_add_sprintf (g, &optionsv, "preallocation=%s", preallocation);
-  if (compat)
-    guestfs_int_add_sprintf (g, &optionsv, "compat=%s", compat);
-  if (clustersize >= 0)
-    guestfs_int_add_sprintf (g, &optionsv, "cluster_size=%d", clustersize);
-  guestfs_int_end_stringsbuf (g, &optionsv);
-
-  if (optionsv.size > 1) {
-    CLEANUP_FREE char *options = guestfs_int_join_strings (",", optionsv.argv);
-    guestfs_int_cmd_add_arg (cmd, "-o");
-    guestfs_int_cmd_add_arg (cmd, options);
-  }
-
   /* Complete the command line. */
   /* If the filename is something like "file:foo" then qemu-img will
    * try to interpret that as "foo" in the file:/// protocol.  To
diff -ruN libguestfs-1.44.1.orig/lib/drives.c libguestfs-1.44.1.mod/lib/drives.c
--- libguestfs-1.44.1.orig/lib/drives.c	2020-03-06 14:31:08.168077968 -0500
+++ libguestfs-1.44.1.mod/lib/drives.c	2023-02-27 16:10:04.930855063 -0500
@@ -59,6 +59,7 @@
   enum discard discard;
   bool copyonread;
   int blocksize;
+  char *secobject;
 };
 
 COMPILE_REGEXP (re_hostname_port, "(.*):(\\d+)$", 0)
@@ -116,6 +117,7 @@
   drv->discard = data->discard;
   drv->copyonread = data->copyonread;
   drv->blocksize = data->blocksize;
+  drv->secobject = data->secobject ? safe_strdup (g, data->secobject) : NULL;
 
   if (data->readonly) {
     if (create_overlay (g, drv) == -1) {
@@ -639,6 +641,37 @@
   return 0;
 }
 
+/**
+ * The object value must be in the format secret,id=sec0,data=backing
+ */
+static int
+valid_secobject (guestfs_h *g, char *secobject)
+{
+  /* Returns first token */
+  char *id;
+  char *data;
+  char *key;
+  char *seccopy = safe_strdup(g, secobject);
+  char *token = strtok(seccopy, ",");
+
+  if (strncmp(token, "secret", strlen("secret")) != 0) {
+    return 0;
+  }
+
+  id = strtok(NULL, ",");
+  data = strtok(NULL, ",");
+
+  key = strtok(id, "=");
+  if (strncmp(key, "id", strlen("id")) != 0) {
+    return 0;
+  }
+  key = strtok(data, "=");
+  if (strncmp(key, "data", strlen("data")) != 0) {
+    return 0;
+  }
+  return 1;
+}
+
 static int
 parse_one_server (guestfs_h *g, const char *server, struct drive_server *ret)
 {
@@ -767,6 +800,8 @@
     ? optargs->secret : NULL;
   data.cachemode = optargs->bitmask & GUESTFS_ADD_DRIVE_OPTS_CACHEMODE_BITMASK
     ? optargs->cachemode : NULL;
+  data.secobject = optargs->bitmask & GUESTFS_ADD_DRIVE_OPTS_SECOBJECT_BITMASK
+    ? (char *) optargs->secobject : NULL;
 
   if (optargs->bitmask & GUESTFS_ADD_DRIVE_OPTS_DISCARD_BITMASK) {
     if (STREQ (optargs->discard, "disable"))
@@ -827,6 +862,12 @@
     return -1;
   }
 
+  if (data.secobject && !valid_secobject (g, data.secobject)) {
+    error (g, _("%s parameter is invalid"), "object");
+    free_drive_servers (data.servers, data.nr_servers);
+    return -1;
+  }
+
   if (STREQ (protocol, "file")) {
     if (data.servers != NULL) {
       error (g, _("you cannot specify a server with file-backed disks"));
@@ -848,11 +889,28 @@
       /* We have to check for the existence of the file since that's
        * required by the API.
        */
-      if (access (filename, R_OK) == -1) {
+      char *fptr;
+      char *tmp;
+      char *filesubstr;
+
+      if ((fptr = strstr(filename, "file.filename=")) == NULL) {
+        if (access (filename, R_OK) == -1) {
+          perrorf (g, "%s", filename);
+          return -1;
+        }
+      } else {
+        fptr += strlen("file.filename=");
+        filesubstr = safe_strdup (g, fptr);
+	tmp = strtok(filesubstr, ",");
+        if (access (tmp, R_OK) == -1) {
+          perrorf (g, "%s", filename);
+          return -1;
+        }
+      }
+      if (strstr(filename, "s3:") == NULL && access (filename, R_OK) == -1) {
         perrorf (g, "%s", filename);
         return -1;
       }
-
       drv = create_drive_file (g, &data);
     }
   }
diff -ruN libguestfs-1.44.1.orig/lib/guestfs-internal.h libguestfs-1.44.1.mod/lib/guestfs-internal.h
--- libguestfs-1.44.1.orig/lib/guestfs-internal.h	2021-04-03 06:20:10.305684996 -0400
+++ libguestfs-1.44.1.mod/lib/guestfs-internal.h	2023-02-27 16:03:14.509076056 -0500
@@ -272,6 +272,7 @@
   enum discard discard;
   bool copyonread;
   int blocksize;
+  char *secobject;
 };
 
 /* Extra hv parameters (from guestfs_config). */
diff -ruN libguestfs-1.44.1.orig/lib/launch-direct.c libguestfs-1.44.1.mod/lib/launch-direct.c
--- libguestfs-1.44.1.orig/lib/launch-direct.c	2020-03-06 14:31:08.171077925 -0500
+++ libguestfs-1.44.1.mod/lib/launch-direct.c	2023-02-27 16:03:14.510076036 -0500
@@ -83,6 +83,11 @@
     optargs.backingformat = drv->src.format;
   }
 
+  if (drv->secobject) {
+    optargs.bitmask |= GUESTFS_DISK_CREATE_SECOBJECT_BITMASK;
+    optargs.secobject = drv->secobject;
+  }
+
   if (guestfs_disk_create_argv (g, overlay, "qcow2", -1, &optargs) == -1) {
     free (overlay);
     return NULL;
@@ -202,10 +207,21 @@
 {
   if (!drv->overlay) {
     CLEANUP_FREE char *file = NULL;
+    CLEANUP_FREE char *token = NULL;
 
     /* file= parameter. */
     file = guestfs_int_drive_source_qemu_param (g, &drv->src);
-    append_list_format ("file=%s", file);
+    if (drv->secobject && strncmp(drv->secobject, "secret", strlen("secret")) == 0) {
+      /* get the first token */
+      token = strtok(file, ",");
+      /* walk through other tokens */
+      while ( token != NULL ) {
+        append_list(token);
+        token = strtok(NULL, ",");
+      }
+    } else {
+      append_list_format ("file=%s", file);
+    }
 
     if (drv->readonly)
       append_list ("snapshot=on");
@@ -296,9 +312,22 @@
 add_drive (guestfs_h *g, struct backend_direct_data *data,
            struct qemuopts *qopts, size_t i, struct drive *drv)
 {
+  CLEANUP_FREE char *token = NULL;
   /* If there's an explicit 'iface', use it.  Otherwise default to
    * virtio-scsi.
    */
+
+  if (drv->secobject && strncmp(drv->secobject, "secret", strlen("secret")) == 0) {
+      /* get the first token */
+      start_list ("--object") {
+      token = strtok(safe_strdup(g, drv->secobject), ",");
+         /* walk through other tokens */
+         while ( token != NULL ) {
+           append_list(token);
+           token = strtok(NULL, ",");
+         }
+      } end_list ();
+  }
   if (drv->iface && STREQ (drv->iface, "virtio")) { /* virtio-blk */
     start_list ("-drive") {
       if (add_drive_standard_params (g, data, qopts, i, drv) == -1)
diff -ruN libguestfs-1.44.1.orig/lib/qemu.c libguestfs-1.44.1.mod/lib/qemu.c
--- libguestfs-1.44.1.orig/lib/qemu.c	2021-04-03 06:20:33.492458904 -0400
+++ libguestfs-1.44.1.mod/lib/qemu.c	2023-02-27 16:13:25.247846027 -0500
@@ -817,13 +817,19 @@
      * As a side-effect this deals with paths that contain ':' since
      * qemu will not process the ':' if the path begins with '/'.
      */
-    path = realpath (src->u.path, NULL);
-    if (path == NULL) {
-      perrorf (g, _("realpath: could not convert ‘%s’ to absolute path"),
-               src->u.path);
-      return NULL;
-    }
-    return path;
+    if (strstr (src->u.path, "secret") == NULL) {
+      path = realpath (src->u.path, NULL);
+      if (path == NULL && strstr(src->u.path, "file.filename=s3:")) {
+          path = strdup(strstr(src->u.path, "file.filename=") + strlen("file.filename="));
+      }
+      if (path == NULL) {
+        perrorf (g, _("realpath: could not convert ‘%s’ to absolute path"),
+                 src->u.path);
+        return NULL;
+      }
+      return path;
+    } else
+      return safe_strdup (g, src->u.path);
 
   case drive_protocol_ftp:
     return make_uri (g, "ftp", src->username, src->secret,
diff -ruN libguestfs-1.44.1.orig/README.md libguestfs-1.44.1.mod/README.md
--- libguestfs-1.44.1.orig/README.md	1969-12-31 19:00:00.000000000 -0500
+++ libguestfs-1.44.1.mod/README.md	2023-02-27 16:03:14.510076036 -0500
@@ -0,0 +1,175 @@
+Libguestfs is tools and a library for accessing and modifying guest
+disk images.  For more information see the home page:
+
+  http://libguestfs.org/
+
+For discussion, development, patches, etc. please use the mailing
+list:
+
+  http://www.redhat.com/mailman/listinfo/libguestfs
+
+To find out how to build libguestfs from source, read:
+
+  docs/guestfs-building.pod
+  http://libguestfs.org/guestfs-building.1.html
+  man docs/guestfs-building.1
+
+Copyright (C) 2009-2020 Red Hat Inc.
+
+The library is distributed under the LGPLv2+.  The programs are
+distributed under the GPLv2+.  Please see the files COPYING and
+COPYING.LIB for full license information.  The examples are under a
+very liberal license.
+
+####################################################################
+
+To build libguestfs from this repository
+
+To build packages on CentOS 8
+=============================
+
+Packages for CentOS 8
+=====================
+You may want to build the following packages if you are building on CentOS 8
+
+```
+sudo yum -y install glibc-devel gcc flex bison ncurses-devel libtirpc-devel pcre-devel
+sudo yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
+sudo yum install https://rpmfind.net/linux/centos/8.4.2105/BaseOS/x86_64/os/Packages/augeas-1.12.0-6.el8.x86_64.rpm
+sudo yum install https://rpmfind.net/linux/centos/8.4.2105/PowerTools/x86_64/os/Packages/augeas-devel-1.12.0-6.el8.x86_64.rpm
+sudo yum install http://mirror.centos.org/centos/8/PowerTools/x86_64/os/Packages/file-devel-5.33-16.el8_3.1.x86_64.rpm
+sudo dnf install jansson-devel
+sudo dnf install jansson
+sudo dnf install fuse
+sudo dnf install fuse-level
+dnf --enablerepo=powertools install gperf
+sudo yum install libcap-devel hivex hivex-devel supermin
+ sh <(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)
+sudo yum install patch make
+
+sudo dnf --enablerepo=powertools install libconfig-devel
+opam init
+sudo dnf --enablerepo=powertools install ocaml
+opam install ocamlfind
+opam install ocamlbuild
+sudo yum install http://mirror.centos.org/centos/8/PowerTools/x86_64/os/Packages/ocaml-hivex-1.3.18-20.module_el8.4.0+547+a85d02ba.x86_64.rpm
+sudo yum install http://mirror.centos.org/centos/8/PowerTools/x86_64/os/Packages/ocaml-hivex-devel-1.3.18-20.module_el8.4.0+547+a85d02ba.x86_64.rpm
+sudo yum install autoconf automake libtool gettext-devel
+sudo yum install yum-utils
+sudo dnf --enablerepo=powertools install ocaml-findlib-devel
+sudo dnf --enablerepo=powertools install glibc-static lua-devel rpcgen ocaml-ocamldoc po4a perl-Test-Pod perl-Test-Pod-Coverage
+sudo dnf --enablerepo=powertools install ocaml-camlp4
+sudo yum install https://cbs.centos.org/kojifiles/packages/ocaml-fileutils/0.5.2/12.el8/x86_64/ocaml-fileutils-0.5.2-12.el8.x86_64.rpm
+sudo yum install https://cbs.centos.org/kojifiles/packages/ocaml-gettext/0.3.7/7.el8/x86_64/ocaml-gettext-devel-0.3.7-7.el8.x86_64.rpm
+sudo yum install https://cbs.centos.org/kojifiles/packages/ocaml-fileutils/0.5.2/12.el8/x86_64/ocaml-fileutils-devel-0.5.2-12.el8.x86_64.rpm
+sudo yum install https://cbs.centos.org/kojifiles/packages/ocaml-fileutils/0.5.2/12.el8/x86_64/ocaml-fileutils-0.5.2-12.el8.x86_64.rpm
+sudo yum-builddep libguestfs
+sudo yum install syslinux
+sudo dnf install ocaml-ounit-devel
+sudo yum install syslinux-extlinux
+```
+
+```
+$ git clone https://github.com/trilioData/libguestfs-1.44.1.encr.git
+$ cd libguestfs-1.44.1.encr
+$ export GO111MODULE=auto # Need this as the golang working directory is not a module, hence this env should be set to 'auto' instead of 'on'.
+$ sudo yum install automake
+$ aclocal
+$ ./autogen.sh # you may need to run it again if the first invocation fails
+$ make
+```
+
+
+To build RPMs:
+==============
+
+```
+cd libguestfs-1.44.1.encr/buildingrpms
+rpm -i libguestfs-1.44.1-1.fc33.src.rpm
+cd ~/rpmbuild/SPECS
+copy libguestfs-1.44.1.encr/buildingrpms/encr.patch into ~/rpmbuild/SOURCES
+```
+
+Modify ~/rpmbuild/SPECS/libguestfs.spec to add the following line after Source0
+
+```
+Patch0:        encr.patch
+rpmbuild -v -ba --nosignature ~/rpmbuild/SPECS/libguestfs.spec
+```
+
+Your rpms will be available at ~/rpmbuild/RPMS/x86_64/.
+
+To Build Debian packages
+========================
+Choose the package that is appropriate for your Ubuntu releases.
+
+$ cat /etc/debian_version
+buster/sid
+
+
+All source packages can be found at: https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=libguestfs.
+Choose the package liguestfs0.
+
+For example, for buster the right package is at: https://packages.debian.org/buster/libguestfs0
+
+Download the source tar file from the right side of the page:
+
+```
+$ curl -O http://deb.debian.org/debian/pool/main/libg/libguestfs/libguestfs_1.40.2.orig.tar.gz
+$ tar xzvf libguestfs_1.40.2.orig.tar.gz
+
+$ cd libguestfs-1.40.2
+```
+
+Apply the patch file https://raw.githubusercontent.com/trilioData/libguestfs-1.44.1.encr/master/buildingrpms/encr.patch to the source.
+
+Download debian build files at  http://deb.debian.org/debian/pool/main/libg/libguestfs/libguestfs_1.40.2-2.debian.tar.xz
+
+```
+curl -O http://deb.debian.org/debian/pool/main/libg/libguestfs/libguestfs_1.40.2-2.debian.tar.xz
+# you may need to install xz-utils for uncompressing *.xz files.
+$ sudo apt install xz-utils devscripts debhelper dh-ocaml dh-python3 dh-python dh-ruby ruby1.9.1-full gem2deb dh-gir dh-make dh-sequence-gir dh-lua dh-php gperf genisoimage flex pcre-devel libpcre-devel libpcre3 libpcre3 libpcre3 libpcre3-devel libpcre3-dev libxml2-dev install libxml2-dev libfile-dev libmagic-dev jansson libjansson libjansson-dev hivex libcap-dev hivex-deve hivex-dev python-hivex libhivex-dev libhivex qemu-system ocaml-findlib-dev ocaml-findlib supermin ocaml-hivex ocaml-findlib libhivex-ocaml libhivex-ocaml-dev openjdk-8-jdk-headless
+$ tar xvf libguestfs_1.40.2-2.debian.tar.xz
+
+curl -O http://deb.debian.org/debian/pool/main/libg/libguestfs/libguestfs_1.44.0.orig.tar.gz
+curl -O curl -O http://deb.debian.org/debian/pool/main/libg/libguestfs/libguestfs_1.40.2-2.debian.tar.xz
+curl -O http://deb.debian.org/debian/pool/main/libg/libguestfs/libguestfs_1.40.2-2.debian.tar.xz
+curl -O http://deb.debian.org/debian/pool/main/libg/libguestfs/libguestfs_1.44.0-2.debian.tar.xz
+curl -O http://ftp.us.debian.org/debian/pool/main/a/augeas/libaugeas0_1.12.0-2_amd64.deb
+curl -O http://ftp.us.debian.org/debian/pool/main/a/augeas/augeas-lenses_1.12.0-2_all.deb
+curl -O https://packages.debian.org/bullseye/amd64/libaugeas-dev/download
+curl -O http://http.us.debian.org/debian/pool/main/a/augeas/libaugeas-dev_1.12.0-2_amd64.deb
+
+sudo dpkg -i libaugeas0_1.12.0-2_amd64.deb
+sudo dpkg -i augeas-lenses_1.12.0-2_all.deb
+sudo dpkg -i libaugeas0_1.12.0-2_amd64.deb
+sudo dpkg -i libaugeas-dev_1.12.0-2_amd64.deb
+sudo dpkg -i libaugeas-dev_1.12.0-2_amd64.deb
+```
+
+Run the following command to build debian packages
+```
+$ debuild -i -d -us -uc -b 2>&1 | tee /tmp/log
+```
+
+After succesful build, the parent directory will contain debian packages
+
+To update the patch file with new changes
+=========================================
+Modify the code, build the appliance and test the changes.
+Create patch file that includes the differences between the original sources and new sources as follows
+diff -urN libguestfs-1.44.1.orig/ libguestfs-1.44.1.mod/  > encr.patch
+Now use the new patch file to create new rpms.
+
+Verify build with encryption changes
+====================================
+To verify that the build is successful and the new binary supports encrypted qcow2 images, follow these steps:
+$ dd if=/dev/urandom of=/tmp/base bs=1M count=1024
+$ qemu-img convert -p --object secret,id=sec0,data=backing --object secret,id=sec2,data=backing --image-opts driver=raw,file.filename=/tmp/base -O qcow2 -o encrypt.format=luks,encrypt.key-secret=sec2 /tmp/base.qcow2
+$ qemu-img create -f qcow2 --object secret,id=sec0,data=backing -b 'json:{ "encrypt.key-secret": "sec0", "driver": "qcow2", "file": { "driver": "file", "filename": "/tmp/base.qcow2" }}' -o encrypt.format=luks,encrypt.key-secret=sec0 /tmp/overlay.qcow2 1G
+
+$ ./run guestfish
+<fs> add driver=qcow2,file.filename=/tmp/overlay.qcow2,encrypt.key-secret=sec0 secobject:secret,id=sec0,data=backing
+<fs> run
+
+The appliance should successfully boot and provide with a prompt.
